// ================= FLOP' Studio Shared Script =================
document.addEventListener('DOMContentLoaded', () => {
  // ========== NAV ACTIVE ==========
  const links = document.querySelectorAll('.nav-links a');
  links.forEach(a => {
    if (location.pathname.endsWith(a.getAttribute('href'))) a.classList.add('active');
  });

  // ========== MOBILE NAV TOGGLE ==========
  const menuToggle = document.getElementById('menuToggle');
  const navLinks = document.querySelector('.nav-links');
  if (menuToggle && navLinks) {
    menuToggle.addEventListener('click', () => {
      navLinks.classList.toggle('open');
      menuToggle.classList.toggle('active');
    });
  }

  // ========== CONTACT FORM SUBMIT ==========
  const contactForm = document.getElementById('contact-form');
  if (contactForm) {
    contactForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const data = new FormData(contactForm);
      const submitBtn = contactForm.querySelector('button[type=submit]');
      submitBtn.disabled = true;
      submitBtn.textContent = 'ƒêang g·ª≠i...';
      try {
        const res = await fetch('send_email.php', { method: 'POST', body: data });
        const json = await res.json();
        if (json.success) {
          alert('‚úÖ G·ª≠i th√†nh c√¥ng ‚Äî ch√∫ng t√¥i s·∫Ω li√™n h·ªá b·∫°n s·ªõm!');
          contactForm.reset();
        } else {
          alert('‚ùå G·ª≠i kh√¥ng th√†nh c√¥ng: ' + (json.message || 'L·ªói m√°y ch·ªß'));
        }
      } catch (err) {
        console.error(err);
        alert('‚ö†Ô∏è L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'G·ª≠i';
      }
    });
  }

  // ========== CONTACT PAGE: GMAIL QUICK SEND ==========
  window.sendEmail = function(event) {
    event.preventDefault();

    const name = document.getElementById("name").value.trim();
    const email = document.getElementById("email").value.trim();
    const message = document.getElementById("message").value.trim();

    const recipient = "nguyenduykhanh200339@gmail.com";
    const subject = encodeURIComponent("Li√™n h·ªá t·ª´ kh√°ch h√†ng FLOP' Studio");
    const body = encodeURIComponent(`T√™n: ${name}\nEmail: ${email}\n\nN·ªôi dung:\n${message}`);

    const gmailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${recipient}&su=${subject}&body=${body}`;
    const mailtoUrl = `mailto:${recipient}?subject=${subject}&body=${body}`;

    // ∆Øu ti√™n m·ªü trong Gmail n·∫øu c√≥ (Android/Chrome)
    if (navigator.userAgent.includes("Android") || navigator.userAgent.includes("Chrome")) {
      window.open(gmailUrl, "_blank");
    } else {
      window.location.href = mailtoUrl;
    }
  };

  // ========== G√ìI CH·ª§P (gia.html) ==========
  const serviceList = document.getElementById('serviceList');
  if (serviceList) {
    const FB_PAGE = "Iuqanh";
    const ZALO_PHONE = "0383070200";

    const servicePackages = {
      beauty: [
        { name: "G√≥i C∆° b·∫£n", price: "2.000.000ƒë" },
        { name: "G√≥i N√¢ng cao", price: "3.000.000ƒë" }
      ],
      wedding: [
        { name: "G√≥i Ti√™u chu·∫©n", price: "5.000.000ƒë" },
        { name: "G√≥i VIP", price: "8.000.000ƒë" }
      ],
      yearbook: [
        { name: "G√≥i L·ªõp Nh·ªè", price: "4.000.000ƒë" },
        { name: "G√≥i L·ªõp L·ªõn", price: "6.000.000ƒë" },
        { name: "G√≥i N√¢ng cao", price: "7.500.000ƒë" }
      ],
      concept: [
        { name: "G√≥i ƒê∆°n", price: "2.500.000ƒë" },
        { name: "G√≥i ƒê√¥i", price: "3.500.000ƒë" }
      ]
    };

    let selectedService = null;
    let selectedPackage = null;
    let selectedDates = [];

    // ========== L·ªäCH CH·ª§P ==========
    flatpickr.localize(flatpickr.l10ns.vn); // K√≠ch ho·∫°t ti·∫øng Vi·ªát
    const fp = flatpickr("#calendar", {
      inline: true,
      mode: "multiple",
      dateFormat: "d/m/Y",
      locale: "vn",
      onChange: (dates, _, instance) => {
        selectedDates = dates.map(d => instance.formatDate(d, "d/m/Y"));
        if (selectedService)
          localStorage.setItem(`dates_${selectedService}`, JSON.stringify(selectedDates));
        updateBookState();
      }
    });

    // ========== DOM Elements ==========
    const serviceCards = document.querySelectorAll(".service-card");
    const packageList = document.getElementById("packageList");
    const packageTitle = document.getElementById("packageTitle");
    const calendarSection = document.getElementById("calendarSection");
    const bookingPanel = document.getElementById("bookingPanel");
    const bookBtn = document.getElementById("bookBtn");
    const modal = document.getElementById("messageModal");
    const modalMessage = document.getElementById("modalMessage");
    const copyBtn = document.getElementById("copyBtn");
    const closeBtn = document.getElementById("closeModal");

    // ========== CH·ªåN D·ªäCH V·ª§ ==========
    serviceCards.forEach(card => {
  card.addEventListener("click", () => {
    serviceCards.forEach(c => {
      c.classList.remove("active");
      const oldInline = c.querySelector(".package-inline");
      if (oldInline) oldInline.remove();
    });
    card.classList.add("active");

    selectedService = card.dataset.service;
    selectedPackage = null;
    selectedDates = JSON.parse(localStorage.getItem(`dates_${selectedService}`)) || [];
    fp.setDate(selectedDates, false);
    updateBookState();

    // N·∫øu l√† mobile, ch√®n g√≥i ngay b√™n d∆∞·ªõi ·∫£nh
    if (window.innerWidth <= 768) {
      const packageHTML = `
        <div class="package-inline">
          ${servicePackages[selectedService].map(
            p => `<div class="package" data-name="${p.name}">
                    <div class="package-title">${p.name}</div>
                    <div class="package-price">${p.price}</div>
                  </div>`
          ).join("")}
        </div>`;
      card.insertAdjacentHTML("beforeend", packageHTML);

      card.querySelectorAll(".package").forEach(pkg => {
        pkg.addEventListener("click", () => {
          card.querySelectorAll(".package").forEach(x => x.classList.remove("selected"));
          pkg.classList.add("selected");
          selectedPackage = pkg.dataset.name;
          updateBookState();
        });
      });
    } else {
      // Giao di·ªán desktop: hi·ªÉn th·ªã ph·∫ßn g√≥i b√™n d∆∞·ªõi nh∆∞ c≈©
      calendarSection.style.display = "block";
      bookingPanel.style.display = "flex";
      packageTitle.textContent = `C√°c g√≥i ${card.querySelector("h3").textContent}`;
      packageList.innerHTML = servicePackages[selectedService].map(
        p => `<div class="package" data-name="${p.name}">
                <div class="package-title">${p.name}</div>
                <div class="package-price">${p.price}</div>
              </div>`
      ).join("");
    }
  });
});


    // ========== C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI N√öT ==========
    function updateBookState() {
      bookBtn.disabled = !(selectedPackage && selectedDates.length);
    }

    // ========== N√öT ƒê·∫∂T L·ªäCH ==========
    bookBtn.addEventListener("click", () => {
      const channel = document.querySelector('input[name="channel"]:checked').value;
      const message =
`Xin ch√†o FLOP' Studio! üëã

M√¨nh mu·ªën ƒë·∫∑t l·ªãch ch·ª•p:
üì∏ G√≥i: ${selectedPackage}
üìÇ D·ªãch v·ª•: ${selectedService.toUpperCase()}
üóìÔ∏è Ng√†y ch·ª•p: ${selectedDates.join(", ")}

C·∫£m ∆°n Studio r·∫•t nhi·ªÅu! üí´`;

      const encodedMsg = encodeURIComponent(message);
      if (channel === "messenger") {
        window.open(`https://m.me/${FB_PAGE}?text=${encodedMsg}`, "_blank");
      } else {
        window.open(`https://zalo.me/${ZALO_PHONE}?text=${encodedMsg}`, "_blank");
      }

      modal.style.display = "block";
      modalMessage.textContent = message;

      setTimeout(() => {
        alert("‚úÖ ƒêang m·ªü ·ª©ng d·ª•ng chat c·ªßa b·∫°n.\nN·∫øu kh√¥ng t·ª± m·ªü, h√£y ki·ªÉm tra popup b·ªã ch·∫∑n ho·∫∑c b·∫•m l·∫°i n√∫t 'ƒê·∫∑t l·ªãch'.");
      }, 1000);
    });

    // ========== COPY & CLOSE MODAL ==========
    if (copyBtn) copyBtn.addEventListener("click", () => {
      navigator.clipboard.writeText(modalMessage.textContent);
      alert("üìã ƒê√£ sao ch√©p tin nh·∫Øn!");
    });
    if (closeBtn) closeBtn.addEventListener("click", () => modal.style.display = "none");
  }
});
<script>
document.addEventListener('DOMContentLoaded', () => {
  const menuToggle = document.getElementById('menuToggle');
  const navLinks = document.querySelector('.nav-links');
  if(menuToggle && navLinks){
    menuToggle.addEventListener('click', () => {
      navLinks.classList.toggle('open');
    });
  }
});
</script>
